package com.web.board.board;

import java.io.IOException;
import java.util.List;

import javax.annotation.Resource;

import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.web.board.service.BoardService;
import com.web.board.vo.BoardValueObject;
import com.web.board.vo.PagingVO;

/**
 * Handles requests for the application home page.
 */
@Controller
public class BoardController {

	@Resource
	private BoardService boardService;

	/**
	 * Simply selects the home view to render by returning its name.
	 */
	
	  @RequestMapping(value = "/selectList") public String selectList (Model model, PagingVO vo, 
			  @RequestParam(value= "keyword"  ,required = false)String keyword,
			  @RequestParam(value = "nowPage", required = false)String nowPage,
			  @RequestParam(value="cntPerPage", required = false)String cntPerPage) {
		  
	  // List<BoardValueObject> list= boardService.selectList(keyword);
		  
		ObjectMapper mapper = new ObjectMapper();
	  
		int total = boardService.countBoard(keyword);
		if (nowPage == null && cntPerPage == null) {
			nowPage = "1";
			cntPerPage = "5";
		} else if (nowPage == null) {
			nowPage = "1";
		} else if (cntPerPage == null) {
			cntPerPage = "5";
		}
		System.out.println("total" + total);
		System.out.println("nowPage" + nowPage);
		System.out.println("cntePerPage" + cntPerPage);
		vo = new PagingVO(total, Integer.parseInt(nowPage), Integer.parseInt(cntPerPage));
		
		vo.setKeyword(keyword);
		System.out.println(vo.toString());
		// model.addAttribute("list", list); model.addAttribute("paging", vo);
		model.addAttribute("paging", vo);		
		try {
			model.addAttribute("list", mapper.writeValueAsString(boardService.selectBoard(vo)));
			System.out.println("list"+mapper.writeValueAsString(boardService.selectBoard(vo)));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return "board/selectList";
	}
	 

	
	
//	  @RequestMapping(value = "/selectList") 
//	  public String selectList (Model model, String keyword) {
//	  
//		  List<BoardValueObject> list= boardService.selectList(keyword);
//		  System.out.println("list size : " + list.size()); 
//		  model.addAttribute("list", list);
//		  
//		  return "board/selectList"; 
//	  }
//	 
	

	@RequestMapping(value = "/selectOne")
	public String selectOne(Model model, int boardId) {
		
		try {
			model.addAttribute("data", boardService.selectOne(boardId);			
		} catch (Exception e) {
			//TODO: handle exception
			e.printStackTrace();
		}
		
		return "board/selectOne";
	}

	@RequestMapping(value = "insert")
	public String insert() {
		return "board/insert";
	}

	@RequestMapping(value = "/insert_action")
	public String insert_action(String board_title, String create_user, String board_contents) {
		BoardValueObject vo = new BoardValueObject();
		System.out.println("Ÿ��Ʋ" + board_title);
		vo.setBoardTitle(board_title);
		vo.setCreateUser(create_user);
		vo.setBoardContents(board_contents);

		boardService.insert_action(vo);

		return "redirect:/selectList";
	}

	@RequestMapping(value = "delete_action")
	public String delete_action(int board_Id) {
		boardService.delete_action(board_Id);
		return "redirect:/selectList";
	}

	@RequestMapping(value = "update")
	public String update(Model model, int board_Id) {
		model.addAttribute("data", boardService.selectOne(board_Id));
		return "board/update";
	}

	@RequestMapping(value = "update_action")
	public String update_action(BoardValueObject vo) {
		boardService.update_action(vo);
		return "redirect:/selectList";
	}

}
